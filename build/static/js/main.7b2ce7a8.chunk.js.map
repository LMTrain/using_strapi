{"version":3,"sources":["pages/Home.js","components/ToastMessage.js","pages/Signin.js","pages/UserPage.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","src","width","height","alt","to","window","location","pathname","ToastMessage","show","message","style","left","transform","position","Toast","ToastHeader","ToastBody","apiURL","process","API_URL","strapi","Strapi","Signin","state","username","password","toast","toastMessage","redirect","loading","handleChange","event","console","log","name","target","value","setState","handleSubmit","a","preventDefault","isFormEmpty","showToast","login","response","setTimeout","this","Card","htmlFor","id","type","placeholder","onChange","Button","onClick","disabled","color","size","React","Component","UserPage","Row","Col","App","exact","path","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7b2ce7a8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\n\n\nfunction Home(props) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"https://lmtrain.github.io/lm-images/assets/images/bugatti_3.jpg\" width=\"350\" height=\"250\" className=\"App-logo\" alt=\"logo\" />\n        <Link\n          to=\"/Signin\" className={window.location.pathname === \"/Signin\" ? \"nav-link active\" : \"nav-link\"}>Sign in\n        </Link>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\r\nimport { Toast, ToastBody, ToastHeader } from 'reactstrap';\r\n\r\nconst ToastMessage = ({show, message}) =>\r\n  show && (\r\n    <div style={{left: '50%', transform: \"translatex(-50%)\", position:\"fixed\" }}>  \r\n      <div className=\"p-3 bg-danger my-2 rounded\">\r\n        <Toast>\r\n          <ToastHeader>\r\n            Input Error\r\n          </ToastHeader>\r\n          <ToastBody>\r\n            {message}\r\n          </ToastBody>\r\n        </Toast>\r\n      </div>      \r\n    </div>\r\n  );\r\n\r\n\r\nexport default ToastMessage;\r\n","import React from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport '../App.css';\r\nimport Strapi from 'strapi-sdk-javascript/build/main';\r\nimport ToastMessage from '../components/ToastMessage';\r\nimport { Card, Button } from 'reactstrap';\r\nconst apiURL = process.env.API_URL || 'http://localhost:1337';\r\nconst strapi = new Strapi(apiURL);\r\n\r\nclass Signin extends React.Component {\r\n  state = {\r\n    username: '',        \r\n    password: '',\r\n    toast: false,\r\n    toastMessage: '',\r\n    redirect: false,\r\n    loading: false\r\n  }\r\n\r\n//   handleChange = ({ event, value }) => {\r\n//     console.log(event, value)\r\n//     // event.persist();\r\n//     this.setState({[event.target.name]: value});\r\n// };\r\n\r\nhandleChange = event => {\r\n  console.log(event)\r\n  const name = event.target.name;\r\n  const value = event.target.value;\r\n  console.log(name)\r\n  console.log(value)\r\n  this.setState({\r\n    [name]: value,\r\n  });\r\n};\r\n\r\nhandleSubmit = async event => {\r\n    event.preventDefault();\r\n    const { username, password } = this.state;\r\n\r\n    if (this.isFormEmpty(this.state)) {\r\n        this.showToast(\"Fill in all fields\");\r\n        return;\r\n    }\r\n    \r\n    //Sign up user\r\n    try {\r\n        this.setState({ loading: true});           \r\n        const response = await strapi.login(username, password);\r\n        this.setState({ loading: false, redirect: true,});\r\n        console.log(\"THIS IS SIGN IN RESPONSE\", response)\r\n        // setToken(response.jwt);            \r\n        // this.redirectUser('/');\r\n    }catch (err) {\r\n        this.setState({ loading: false});\r\n        this.showToast(err.message);\r\n    }\r\n};\r\n\r\n// redirectUser = path => this.props.history.push(path);\r\n\r\nisFormEmpty = ({username, password}) => {\r\n    return !username || !password;\r\n};\r\n\r\nshowToast = toastMessage => {\r\n    this.setState({ toast: true, toastMessage });\r\n    setTimeout(() => this.setState({ toast: false, toastMessage: '' }), 5000);\r\n}\r\n  render() {\r\n    const { toastMessage, toast, loading } = this.state;\r\n    if (this.state.redirect === true) {        \r\n        return <Redirect to='/UserPage' />\r\n      }    \r\n    return (\r\n      <> \r\n       <div className=\"card card-body\">    \r\n        <Card>\r\n          <form className=\"form-groups\">\r\n            <div className=\"form-group\">\r\n            <label htmlFor=\"username\"></label>\r\n              <input\r\n                id=\"username\"\r\n                type=\"text\"\r\n                name=\"username\"\r\n                placeholder=\"Username\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>                  \r\n            {/* Password Input */}\r\n            <div className=\"form-group\">\r\n            <label htmlFor=\"password\"></label>\r\n              <input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n            <Button type=\"submit\" onClick={this.handleSubmit} disabled={loading} color=\"success\" size=\"sm\" >Sign In</Button>\r\n                  \r\n                            \r\n          </form> \r\n        </Card>\r\n        </div>\r\n        <ToastMessage show={toast} message={toastMessage}/>        \r\n    </>        \r\n    );\r\n  }  \r\n}\r\n\r\n\r\nexport default Signin;\r\n","import React, { Component } from \"react\";\r\nimport { Button, Row, Col } from 'reactstrap';\r\n// import { Redirect } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass UserPage extends Component {\r\n    state = {\r\n        redirect: false        \r\n    }\r\n\r\n\r\n    // homePage = () => {\r\n    //     this.setState({redirect: true})\r\n    //     if (this.state.redirect === true) {        \r\n    //         return <Redirect to='/Home' />\r\n    //       }    \r\n    // }\r\n  render() {\r\n      \r\n   return (\r\n       <div>\r\n     \r\n           <Row>              \r\n           <Col size=\"md-10\">\r\n               <div><b> Welcome Guys</b></div>\r\n           </Col>\r\n           <Col size=\"md-2\">\r\n               <div className=\"lineitems\">            \r\n                   <span><Button type=\"submit\" color=\"success\" size=\"sm\" onClick={() => console.log(\"THIS IS SETTINGS\")}>Settings</Button></span>\r\n                   <Button type=\"submit\" color=\"success\" size=\"sm\" onClick={() => console.log(\"THIS IS TODAYS DEAL\")}>Todays Deal</Button>\r\n                   <Button  color=\"success\" size=\"sm\"><Link to=\"/Home\" className={window.location.pathname === \"/Home\" ? \"nav-link active\" : \"nav-link\"}>Sign Out</Link></Button>\r\n        \r\n               </div>        \r\n           </Col>\r\n           </Row>\r\n       \r\n       </div>\r\n   );\r\n }\r\n}\r\n\r\n\r\nexport default UserPage;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './pages/Home';\nimport Signin from './pages/Signin';\nimport UserPage from './pages/UserPage'\nimport './App.css';\n\nclass App extends React.Component {\n  \n  render() {\n    \n    return (\n    <Router>\n      <Route exact path=\"/\" render = { () => <Home />}/>\n      <Route exact path=\"/home\" render = { () => <Home />}/>\n      <Route exact path=\"/Signin\" render = { () => <Signin />}/>\n      <Route exact path=\"/UserPage\" render = { () => <UserPage />}/>\n    </Router>        \n    );\n  }  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}